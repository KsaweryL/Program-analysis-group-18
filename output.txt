┌ Case jpamb.cases.Simple.assertBoolean:(false) -> assertion error
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertBoolean:(Z)V' '(false)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(bool False)}, ϵ, jpamb.cases.Simple.assertBoolean:(Z)V:0>
│││ [DEBUG] Type: Z
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool False)}, (bool False), jpamb.cases.Simple.assertBoolean:(Z)V:1>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP load:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool False)}, ϵ, jpamb.cases.Simple.assertBoolean:(Z)V:2>
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool False)}, (bool False), jpamb.cases.Simple.assertBoolean:(Z)V:3>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP new java/lang/AssertionError
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool False)}, ϵ, jpamb.cases.Simple.assertBoolean:(Z)V:4>
│││ [DEBUG] STEP dup 1
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(bool False)}, 1, jpamb.cases.Simple.assertBoolean:(Z)V:5>
│││ [DEBUG] STEP invoke special java/lang/AssertionError.<init>:()V
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(bool False)}, 11, jpamb.cases.Simple.assertBoolean:(Z)V:6>
││└ Stderr
││┌ Stdout
│││ assertion error
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertBoolean:(Z)V' '(false)'
│ Expected 'assertion error' and got 'assertion error'
└ Case jpamb.cases.Simple.assertBoolean:(false) -> assertion error
┌ Case jpamb.cases.Simple.assertBoolean:(true) -> ok
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertBoolean:(Z)V' '(true)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(bool True)}, ϵ, jpamb.cases.Simple.assertBoolean:(Z)V:0>
│││ [DEBUG] Type: Z
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool True)}, (bool False), jpamb.cases.Simple.assertBoolean:(Z)V:1>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP load:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool True)}, ϵ, jpamb.cases.Simple.assertBoolean:(Z)V:2>
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool True)}, (bool True), jpamb.cases.Simple.assertBoolean:(Z)V:3>
│││ [DEBUG] To compare Value(type=Boolean(), value=True)
│││ [DEBUG] STEP new java/lang/AssertionError
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool True)}, ϵ, jpamb.cases.Simple.assertBoolean:(Z)V:4>
│││ [DEBUG] STEP dup 1
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(bool True)}, 1, jpamb.cases.Simple.assertBoolean:(Z)V:5>
│││ [DEBUG] STEP invoke special java/lang/AssertionError.<init>:()V
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(bool True)}, 11, jpamb.cases.Simple.assertBoolean:(Z)V:6>
││└ Stderr
││┌ Stdout
│││ assertion error
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertBoolean:(Z)V' '(true)'
│ Expected 'ok' and got 'assertion error'
└ Case jpamb.cases.Simple.assertBoolean:(true) -> ok
┌ Case jpamb.cases.Simple.assertFalse:() -> assertion error
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertFalse:()V' '()'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{}, ϵ, jpamb.cases.Simple.assertFalse:()V:0>
│││ [DEBUG] Type: Z
│││ [DEBUG] STEP ifz ne 6
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{}, (bool False), jpamb.cases.Simple.assertFalse:()V:1>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP new java/lang/AssertionError
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{}, ϵ, jpamb.cases.Simple.assertFalse:()V:2>
│││ [DEBUG] STEP dup 1
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{}, 1, jpamb.cases.Simple.assertFalse:()V:3>
│││ [DEBUG] STEP invoke special java/lang/AssertionError.<init>:()V
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{}, 11, jpamb.cases.Simple.assertFalse:()V:4>
││└ Stderr
││┌ Stdout
│││ assertion error
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertFalse:()V' '()'
│ Expected 'assertion error' and got 'assertion error'
└ Case jpamb.cases.Simple.assertFalse:() -> assertion error
┌ Case jpamb.cases.Simple.assertInteger:(0) -> assertion error
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertInteger:(I)V' '(0)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.assertInteger:(I)V:0>
│││ [DEBUG] Type: Z
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, (bool False), jpamb.cases.Simple.assertInteger:(I)V:1>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP load:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, ϵ, jpamb.cases.Simple.assertInteger:(I)V:2>
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, (int 0), jpamb.cases.Simple.assertInteger:(I)V:3>
│││ [DEBUG] To compare Value(type=Int(), value=0)
│││ [DEBUG] STEP new java/lang/AssertionError
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, ϵ, jpamb.cases.Simple.assertInteger:(I)V:4>
│││ [DEBUG] STEP dup 1
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(int 0)}, 1, jpamb.cases.Simple.assertInteger:(I)V:5>
│││ [DEBUG] STEP invoke special java/lang/AssertionError.<init>:()V
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(int 0)}, 11, jpamb.cases.Simple.assertInteger:(I)V:6>
││└ Stderr
││┌ Stdout
│││ assertion error
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertInteger:(I)V' '(0)'
│ Expected 'assertion error' and got 'assertion error'
└ Case jpamb.cases.Simple.assertInteger:(0) -> assertion error
┌ Case jpamb.cases.Simple.assertInteger:(1) -> ok
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertInteger:(I)V' '(1)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int 1)}, ϵ, jpamb.cases.Simple.assertInteger:(I)V:0>
│││ [DEBUG] Type: Z
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, (bool False), jpamb.cases.Simple.assertInteger:(I)V:1>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP load:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, ϵ, jpamb.cases.Simple.assertInteger:(I)V:2>
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, (int 1), jpamb.cases.Simple.assertInteger:(I)V:3>
│││ [DEBUG] To compare Value(type=Int(), value=1)
│││ [DEBUG] STEP return:V
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, ϵ, jpamb.cases.Simple.assertInteger:(I)V:8>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertInteger:(I)V' '(1)'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.assertInteger:(1) -> ok
┌ Case jpamb.cases.Simple.assertPositive:(-1) -> assertion error
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertPositive:(I)V' '(-1)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int -1)}, ϵ, jpamb.cases.Simple.assertPositive:(I)V:0>
│││ [DEBUG] Type: Z
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int -1)}, (bool False), jpamb.cases.Simple.assertPositive:(I)V:1>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP load:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int -1)}, ϵ, jpamb.cases.Simple.assertPositive:(I)V:2>
│││ [DEBUG] STEP ifz gt 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int -1)}, (int -1), jpamb.cases.Simple.assertPositive:(I)V:3>
│││ [DEBUG] To compare Value(type=Int(), value=-1)
│││ [DEBUG] STEP new java/lang/AssertionError
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int -1)}, ϵ, jpamb.cases.Simple.assertPositive:(I)V:4>
│││ [DEBUG] STEP dup 1
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(int -1)}, 1, jpamb.cases.Simple.assertPositive:(I)V:5>
│││ [DEBUG] STEP invoke special java/lang/AssertionError.<init>:()V
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(int -1)}, 11, jpamb.cases.Simple.assertPositive:(I)V:6>
││└ Stderr
││┌ Stdout
│││ assertion error
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertPositive:(I)V' '(-1)'
│ Expected 'assertion error' and got 'assertion error'
└ Case jpamb.cases.Simple.assertPositive:(-1) -> assertion error
┌ Case jpamb.cases.Simple.assertPositive:(1) -> ok
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertPositive:(I)V' '(1)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int 1)}, ϵ, jpamb.cases.Simple.assertPositive:(I)V:0>
│││ [DEBUG] Type: Z
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, (bool False), jpamb.cases.Simple.assertPositive:(I)V:1>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP load:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, ϵ, jpamb.cases.Simple.assertPositive:(I)V:2>
│││ [DEBUG] STEP ifz gt 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, (int 1), jpamb.cases.Simple.assertPositive:(I)V:3>
│││ [DEBUG] To compare Value(type=Int(), value=1)
│││ [DEBUG] STEP return:V
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, ϵ, jpamb.cases.Simple.assertPositive:(I)V:8>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.assertPositive:(I)V' '(1)'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.assertPositive:(1) -> ok
┌ Case jpamb.cases.Simple.checkBeforeAssert:(-1) -> assertion error
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeAssert:(I)V' '(-1)'
││┌ Stderr
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int -1)}, ϵ, jpamb.cases.Simple.checkBeforeAssert:(I)V:0>
│││ [DEBUG] STEP ifz ne 3
│││ {} <{0:(int -1)}, (int -1), jpamb.cases.Simple.checkBeforeAssert:(I)V:1>
│││ [DEBUG] To compare Value(type=Int(), value=-1)
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int -1)}, ϵ, jpamb.cases.Simple.checkBeforeAssert:(I)V:3>
│││ [DEBUG] Type: Z
│││ [DEBUG] STEP ifz ne 13
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int -1)}, (bool False), jpamb.cases.Simple.checkBeforeAssert:(I)V:4>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP push:I 1
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int -1)}, ϵ, jpamb.cases.Simple.checkBeforeAssert:(I)V:5>
│││ [DEBUG] STEP load:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int -1)}, (int 1), jpamb.cases.Simple.checkBeforeAssert:(I)V:6>
│││ [DEBUG] STEP binary:I div
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int -1)}, (int 1)(int -1), jpamb.cases.Simple.checkBeforeAssert:(I)V:7>
│││ [DEBUG] STEP ifz gt 13
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int -1)}, (int -1), jpamb.cases.Simple.checkBeforeAssert:(I)V:8>
│││ [DEBUG] To compare Value(type=Int(), value=-1)
│││ [DEBUG] STEP new java/lang/AssertionError
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int -1)}, ϵ, jpamb.cases.Simple.checkBeforeAssert:(I)V:9>
│││ [DEBUG] STEP dup 1
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(int -1)}, 1, jpamb.cases.Simple.checkBeforeAssert:(I)V:10>
│││ [DEBUG] STEP invoke special java/lang/AssertionError.<init>:()V
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(int -1)}, 11, jpamb.cases.Simple.checkBeforeAssert:(I)V:11>
││└ Stderr
││┌ Stdout
│││ assertion error
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeAssert:(I)V' '(-1)'
│ Expected 'assertion error' and got 'assertion error'
└ Case jpamb.cases.Simple.checkBeforeAssert:(-1) -> assertion error
┌ Case jpamb.cases.Simple.checkBeforeAssert:(0) -> ok
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeAssert:(I)V' '(0)'
││┌ Stderr
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.checkBeforeAssert:(I)V:0>
│││ [DEBUG] STEP ifz ne 3
│││ {} <{0:(int 0)}, (int 0), jpamb.cases.Simple.checkBeforeAssert:(I)V:1>
│││ [DEBUG] To compare Value(type=Int(), value=0)
│││ [DEBUG] STEP return:V
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.checkBeforeAssert:(I)V:2>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeAssert:(I)V' '(0)'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.checkBeforeAssert:(0) -> ok
┌ Case jpamb.cases.Simple.checkBeforeDivideByN2:(0) -> ok
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN2:(I)I' '(0)'
││┌ Stderr
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:0>
│││ [DEBUG] STEP ifz eq 6
│││ {} <{0:(int 0)}, (int 0), jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:1>
│││ [DEBUG] To compare Value(type=Int(), value=0)
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:6>
│││ [DEBUG] Type: Z
│││ [DEBUG] STEP ifz ne 15
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, (bool False), jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:7>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP push:I 10
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:8>
│││ [DEBUG] STEP load:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, (int 10), jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:9>
│││ [DEBUG] STEP if gt 15
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, (int 10)(int 0), jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:10>
│││ [DEBUG] To compare Value(type=Int(), value=10) and Value(type=Int(), value=0)
│││ [DEBUG] STEP push:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:15>
│││ [DEBUG] STEP return:I
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, (int 0), jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:16>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN2:(I)I' '(0)'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.checkBeforeDivideByN2:(0) -> ok
┌ Case jpamb.cases.Simple.checkBeforeDivideByN2:(1) -> ok
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN2:(I)I' '(1)'
││┌ Stderr
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 1)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:0>
│││ [DEBUG] STEP ifz eq 6
│││ {} <{0:(int 1)}, (int 1), jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:1>
│││ [DEBUG] To compare Value(type=Int(), value=1)
│││ [DEBUG] STEP push:I 1
│││ {} <{0:(int 1)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:2>
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 1)}, (int 1), jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:3>
│││ [DEBUG] STEP binary:I div
│││ {} <{0:(int 1)}, (int 1)(int 1), jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:4>
│││ [DEBUG] STEP return:I
│││ {} <{0:(int 1)}, (int 1), jpamb.cases.Simple.checkBeforeDivideByN2:(I)I:5>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN2:(I)I' '(1)'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.checkBeforeDivideByN2:(1) -> ok
┌ Case jpamb.cases.Simple.checkBeforeDivideByN:(0) -> assertion error
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN:(I)I' '(0)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN:(I)I:0>
│││ [DEBUG] Type: Z
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, (bool False), jpamb.cases.Simple.checkBeforeDivideByN:(I)I:1>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP load:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN:(I)I:2>
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, (int 0), jpamb.cases.Simple.checkBeforeDivideByN:(I)I:3>
│││ [DEBUG] To compare Value(type=Int(), value=0)
│││ [DEBUG] STEP new java/lang/AssertionError
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 0)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN:(I)I:4>
│││ [DEBUG] STEP dup 1
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(int 0)}, 1, jpamb.cases.Simple.checkBeforeDivideByN:(I)I:5>
│││ [DEBUG] STEP invoke special java/lang/AssertionError.<init>:()V
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(int 0)}, 11, jpamb.cases.Simple.checkBeforeDivideByN:(I)I:6>
││└ Stderr
││┌ Stdout
│││ assertion error
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN:(I)I' '(0)'
│ Expected 'assertion error' and got 'assertion error'
└ Case jpamb.cases.Simple.checkBeforeDivideByN:(0) -> assertion error
┌ Case jpamb.cases.Simple.checkBeforeDivideByN:(1) -> ok
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN:(I)I' '(1)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(int 1)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN:(I)I:0>
│││ [DEBUG] Type: Z
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, (bool False), jpamb.cases.Simple.checkBeforeDivideByN:(I)I:1>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP load:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN:(I)I:2>
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, (int 1), jpamb.cases.Simple.checkBeforeDivideByN:(I)I:3>
│││ [DEBUG] To compare Value(type=Int(), value=1)
│││ [DEBUG] STEP push:I 1
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, ϵ, jpamb.cases.Simple.checkBeforeDivideByN:(I)I:8>
│││ [DEBUG] STEP load:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, (int 1), jpamb.cases.Simple.checkBeforeDivideByN:(I)I:9>
│││ [DEBUG] STEP binary:I div
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, (int 1)(int 1), jpamb.cases.Simple.checkBeforeDivideByN:(I)I:10>
│││ [DEBUG] STEP return:I
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(int 1)}, (int 1), jpamb.cases.Simple.checkBeforeDivideByN:(I)I:11>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.checkBeforeDivideByN:(I)I' '(1)'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.checkBeforeDivideByN:(1) -> ok
┌ Case jpamb.cases.Simple.divideByN:(0) -> divide by zero
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideByN:(I)I' '(0)'
││┌ Stderr
│││ [DEBUG] STEP push:I 1
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.divideByN:(I)I:0>
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 0)}, (int 1), jpamb.cases.Simple.divideByN:(I)I:1>
│││ [DEBUG] STEP binary:I div
│││ {} <{0:(int 0)}, (int 1)(int 0), jpamb.cases.Simple.divideByN:(I)I:2>
││└ Stderr
││┌ Stdout
│││ divide by zero
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideByN:(I)I' '(0)'
│ Expected 'divide by zero' and got 'divide by zero'
└ Case jpamb.cases.Simple.divideByN:(0) -> divide by zero
┌ Case jpamb.cases.Simple.divideByN:(1) -> ok
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideByN:(I)I' '(1)'
││┌ Stderr
│││ [DEBUG] STEP push:I 1
│││ {} <{0:(int 1)}, ϵ, jpamb.cases.Simple.divideByN:(I)I:0>
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 1)}, (int 1), jpamb.cases.Simple.divideByN:(I)I:1>
│││ [DEBUG] STEP binary:I div
│││ {} <{0:(int 1)}, (int 1)(int 1), jpamb.cases.Simple.divideByN:(I)I:2>
│││ [DEBUG] STEP return:I
│││ {} <{0:(int 1)}, (int 1), jpamb.cases.Simple.divideByN:(I)I:3>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideByN:(I)I' '(1)'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.divideByN:(1) -> ok
┌ Case jpamb.cases.Simple.divideByNMinus10054203:(0) -> ok
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideByNMinus10054203:(I)I' '(0)'
││┌ Stderr
│││ [DEBUG] STEP push:I 1
│││ {} <{0:(int 0)}, ϵ, jpamb.cases.Simple.divideByNMinus10054203:(I)I:0>
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 0)}, (int 1), jpamb.cases.Simple.divideByNMinus10054203:(I)I:1>
│││ [DEBUG] STEP push:I 10054203
│││ {} <{0:(int 0)}, (int 1)(int 0), jpamb.cases.Simple.divideByNMinus10054203:(I)I:2>
│││ [DEBUG] STEP binary:I sub
│││ {} <{0:(int 0)}, (int 1)(int 0)(int 10054203), jpamb.cases.Simple.divideByNMinus10054203:(I)I:3>
│││ [DEBUG] STEP binary:I div
│││ {} <{0:(int 0)}, (int 1)(int -10054203), jpamb.cases.Simple.divideByNMinus10054203:(I)I:4>
│││ [DEBUG] STEP return:I
│││ {} <{0:(int 0)}, (int -1), jpamb.cases.Simple.divideByNMinus10054203:(I)I:5>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideByNMinus10054203:(I)I' '(0)'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.divideByNMinus10054203:(0) -> ok
┌ Case jpamb.cases.Simple.divideByNMinus10054203:(10054203) -> divide by zero
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideByNMinus10054203:(I)I' '(10054203)'
││┌ Stderr
│││ [DEBUG] STEP push:I 1
│││ {} <{0:(int 10054203)}, ϵ, jpamb.cases.Simple.divideByNMinus10054203:(I)I:0>
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 10054203)}, (int 1), jpamb.cases.Simple.divideByNMinus10054203:(I)I:1>
│││ [DEBUG] STEP push:I 10054203
│││ {} <{0:(int 10054203)}, (int 1)(int 10054203), jpamb.cases.Simple.divideByNMinus10054203:(I)I:2>
│││ [DEBUG] STEP binary:I sub
│││ {} <{0:(int 10054203)}, (int 1)(int 10054203)(int 10054203), jpamb.cases.Simple.divideByNMinus10054203:(I)I:3>
│││ [DEBUG] STEP binary:I div
│││ {} <{0:(int 10054203)}, (int 1)(int 0), jpamb.cases.Simple.divideByNMinus10054203:(I)I:4>
││└ Stderr
││┌ Stdout
│││ divide by zero
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideByNMinus10054203:(I)I' '(10054203)'
│ Expected 'divide by zero' and got 'divide by zero'
└ Case jpamb.cases.Simple.divideByNMinus10054203:(10054203) -> divide by zero
┌ Case jpamb.cases.Simple.divideByZero:() -> divide by zero
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideByZero:()I' '()'
││┌ Stderr
│││ [DEBUG] STEP push:I 1
│││ {} <{}, ϵ, jpamb.cases.Simple.divideByZero:()I:0>
│││ [DEBUG] STEP push:I 0
│││ {} <{}, (int 1), jpamb.cases.Simple.divideByZero:()I:1>
│││ [DEBUG] STEP binary:I div
│││ {} <{}, (int 1)(int 0), jpamb.cases.Simple.divideByZero:()I:2>
││└ Stderr
││┌ Stdout
│││ divide by zero
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideByZero:()I' '()'
│ Expected 'divide by zero' and got 'divide by zero'
└ Case jpamb.cases.Simple.divideByZero:() -> divide by zero
┌ Case jpamb.cases.Simple.divideZeroByZero:(0, 0) -> divide by zero
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideZeroByZero:(II)I' '(0, 0)'
││┌ Stderr
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 0), 1:(int 0)}, ϵ, jpamb.cases.Simple.divideZeroByZero:(II)I:0>
│││ [DEBUG] STEP load:I 1
│││ {} <{0:(int 0), 1:(int 0)}, (int 0), jpamb.cases.Simple.divideZeroByZero:(II)I:1>
│││ [DEBUG] STEP binary:I div
│││ {} <{0:(int 0), 1:(int 0)}, (int 0)(int 0), jpamb.cases.Simple.divideZeroByZero:(II)I:2>
││└ Stderr
││┌ Stdout
│││ divide by zero
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideZeroByZero:(II)I' '(0, 0)'
│ Expected 'divide by zero' and got 'divide by zero'
└ Case jpamb.cases.Simple.divideZeroByZero:(0, 0) -> divide by zero
┌ Case jpamb.cases.Simple.divideZeroByZero:(0, 1) -> ok
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideZeroByZero:(II)I' '(0, 1)'
││┌ Stderr
│││ [DEBUG] STEP load:I 0
│││ {} <{0:(int 0), 1:(int 1)}, ϵ, jpamb.cases.Simple.divideZeroByZero:(II)I:0>
│││ [DEBUG] STEP load:I 1
│││ {} <{0:(int 0), 1:(int 1)}, (int 0), jpamb.cases.Simple.divideZeroByZero:(II)I:1>
│││ [DEBUG] STEP binary:I div
│││ {} <{0:(int 0), 1:(int 1)}, (int 0)(int 1), jpamb.cases.Simple.divideZeroByZero:(II)I:2>
│││ [DEBUG] STEP return:I
│││ {} <{0:(int 0), 1:(int 1)}, (int 0), jpamb.cases.Simple.divideZeroByZero:(II)I:3>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.divideZeroByZero:(II)I' '(0, 1)'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.divideZeroByZero:(0, 1) -> ok
┌ Case jpamb.cases.Simple.earlyReturn:() -> ok
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.earlyReturn:()I' '()'
││┌ Stderr
│││ [DEBUG] STEP push:I 0
│││ {} <{}, ϵ, jpamb.cases.Simple.earlyReturn:()I:0>
│││ [DEBUG] STEP return:I
│││ {} <{}, (int 0), jpamb.cases.Simple.earlyReturn:()I:1>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.earlyReturn:()I' '()'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.earlyReturn:() -> ok
┌ Case jpamb.cases.Simple.justReturn:() -> ok
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.justReturn:()I' '()'
││┌ Stderr
│││ [DEBUG] STEP push:I 0
│││ {} <{}, ϵ, jpamb.cases.Simple.justReturn:()I:0>
│││ [DEBUG] STEP return:I
│││ {} <{}, (int 0), jpamb.cases.Simple.justReturn:()I:1>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.justReturn:()I' '()'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.justReturn:() -> ok
┌ Case jpamb.cases.Simple.justReturnNothing:() -> ok
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.justReturnNothing:()V' '()'
││┌ Stderr
│││ [DEBUG] STEP return:V
│││ {} <{}, ϵ, jpamb.cases.Simple.justReturnNothing:()V:0>
││└ Stderr
││┌ Stdout
│││ ok
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.justReturnNothing:()V' '()'
│ Expected 'ok' and got 'ok'
└ Case jpamb.cases.Simple.justReturnNothing:() -> ok
┌ Case jpamb.cases.Simple.multiError:(false) -> assertion error
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.multiError:(Z)I' '(false)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(bool False)}, ϵ, jpamb.cases.Simple.multiError:(Z)I:0>
│││ [DEBUG] Type: Z
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool False)}, (bool False), jpamb.cases.Simple.multiError:(Z)I:1>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP load:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool False)}, ϵ, jpamb.cases.Simple.multiError:(Z)I:2>
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool False)}, (bool False), jpamb.cases.Simple.multiError:(Z)I:3>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP new java/lang/AssertionError
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool False)}, ϵ, jpamb.cases.Simple.multiError:(Z)I:4>
│││ [DEBUG] STEP dup 1
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(bool False)}, 1, jpamb.cases.Simple.multiError:(Z)I:5>
│││ [DEBUG] STEP invoke special java/lang/AssertionError.<init>:()V
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(bool False)}, 11, jpamb.cases.Simple.multiError:(Z)I:6>
││└ Stderr
││┌ Stdout
│││ assertion error
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.multiError:(Z)I' '(false)'
│ Expected 'assertion error' and got 'assertion error'
└ Case jpamb.cases.Simple.multiError:(false) -> assertion error
┌ Case jpamb.cases.Simple.multiError:(true) -> divide by zero
│┌ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.multiError:(Z)I' '(true)'
││┌ Stderr
│││ [DEBUG] STEP get static jpamb/cases/Simple.$assertionsDisabled:Z
│││ {} <{0:(bool True)}, ϵ, jpamb.cases.Simple.multiError:(Z)I:0>
│││ [DEBUG] Type: Z
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool True)}, (bool False), jpamb.cases.Simple.multiError:(Z)I:1>
│││ [DEBUG] To compare Value(type=Boolean(), value=False)
│││ [DEBUG] STEP load:I 0
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool True)}, ϵ, jpamb.cases.Simple.multiError:(Z)I:2>
│││ [DEBUG] STEP ifz ne 8
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool True)}, (bool True), jpamb.cases.Simple.multiError:(Z)I:3>
│││ [DEBUG] To compare Value(type=Boolean(), value=True)
│││ [DEBUG] STEP new java/lang/AssertionError
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False)} <{0:(bool True)}, ϵ, jpamb.cases.Simple.multiError:(Z)I:4>
│││ [DEBUG] STEP dup 1
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(bool True)}, 1, jpamb.cases.Simple.multiError:(Z)I:5>
│││ [DEBUG] STEP invoke special java/lang/AssertionError.<init>:()V
│││ {AbsFieldID(classname=ClassName('jpamb/cases/Simple'), extension=FieldID(name='$assertionsDisabled', type=Boolean())): Value(type=Boolean(), value=False), 1: Value(type=Reference(), value={'classname': ClassName('java/lang/AssertionError'), 'fields': {}})} <{0:(bool True)}, 11, jpamb.cases.Simple.multiError:(Z)I:6>
││└ Stderr
││┌ Stdout
│││ assertion error
││└ Stdout
│└ Run /home/zipek/masters-deg/.venv_uv/bin/python solutions/interpreter.py 'jpamb.cases.Simple.multiError:(Z)I' '(true)'
│ Expected 'divide by zero' and got 'assertion error'
└ Case jpamb.cases.Simple.multiError:(true) -> divide by zero
Total 23/25
